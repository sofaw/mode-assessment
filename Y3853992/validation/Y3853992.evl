context Conflict {
	constraint NoCustomerAndSystemRequirementConflicts {
		check : self.first.type == self.second.type
		message : "Customer and System requirements cannot be in conflict at requirements \"" 
			+ self.first.`identifier` + " and " + self.second.`identifier` + "\"."
			
		fix {
			title : "Delete conflict between requirements " + self.first.`identifier` 
						+ " and " + self.second.`identifier` + "\"."
    		do {
    			delete self;
    		}
		}
	}
	
	critique ConflictsWithinRequirementDecomposition {
		check {
			/* For 'first' and 'second' create a set of all requirements (including themselves) 
			above them in the decomposition tree */
			var firstParents = self.first.closure(r | r.parentDecomposition).asSet();
			firstParents.add(self.first);
			var secondParents = self.second.closure(r | r.parentDecomposition).asSet();
			secondParents.add(self.second);
			var disjoint = firstParents.excludingAll(secondParents);
			
			/* If removing all of the parents of 'second' from 'first' results in a different set from firstParents,
			   then 'first' and 'second' have at least one parent in common and are therefore in the same tree */
			return disjoint.size() == firstParents.size(); 
		}
		message : "There is a conflict within a decomposition tree at requirements " + self.first.`identifier` 
						+ " and " + self.second.`identifier` + "\"."
		fix {
			title : "Delete conflict between requirements " + self.first.`identifier` 
						+ " and " + self.second.`identifier` + "\"."
    		do {
    			delete self;
    		}
		}
	}
	
	constraint NoDuplicateConflicts {
		check {
			var conflicts = Conflict.allInstances;
			var duplicates = conflicts.select(c | (c.first == self.first and c.second == self.second) 
				or (c.first == self.second and c.second == self.first));
			return (duplicates.size() == 1); // conflict should only appear once
		}
		message : "Duplicate of conflict between requirements " + self.first.`identifier`
			+ " and " + self.second.`identifier` + "\"."
	}
}

context Requirement {
	constraint IdentifierIsUnique {
		check {
			var otherIdentifiers = Requirement.all.excluding(self).identifier;
			return not otherIdentifiers.contains(self.identifier);
		} 
		message : "Identifier for requirement \"" + self.`identifier` 
			+ "\" with description \"" + self.`description` + "\" must be unique."
	}
	
	constraint DescriptionAtLeastTenChars {
		check : self.description.isDefined() and self.description.length() >= 10
		message : "Requirement \"" + self.`identifier` + "\" must have a description longer than 10 characters."
	}

	constraint SystemReqCannotDecomposeToCustomerReq {
		guard : self.type == RequirementType#System
		
		check : not self.decomposition.exists(r | r.type == RequirementType#Customer)
		message : "System requirements cannot be decomposed to Customer requirements at requirement \"" 
			+ self.`identifier` + "\"." 
			
		fix {
				title : "Delete decompositions of system requirement " + self.`identifier` + " to customer requirement(s)."
   			do {
    			self.decomposition = self.decomposition.select(r | r.type == RequirementType#System);
    		}
		}
	}
	
	constraint CustomerReqDecomposesToSystemReq {
		guard : self.type == RequirementType#Customer
		
		check : self.decomposition.exists(r | r.type == RequirementType#System)
		message : "Customer requirement must decompose into at least one System requirement at requirement \"" 
			+ self.`identifier` + "\"." 
	}
	
	constraint LeafReqProgressIsInBounds {
		// Don't need to check for non-leaf requirements because progress value is derived
		guard : self.decomposition.size() == 0 
		check : self.progress >= 0.0 and self.progress <= 1.0
		message : "Progress should have a value between 0.0 and 1.0 at requirement \"" 
			+ self.`identifier` + "\"."
	}
		
	constraint DecompositionFreeOfCycles {
		check : not self.closure(r | r.decomposition).includes(self)
		message : "Requirements decomposition must be free of cycles at requirement \""
			+ self.`identifier` + "\"."
	}
	
	constraint SystemReqOriginatesFromCustomerReq {
		guard : self.type == RequirementType#System
		check : self.closure(r | r.parentDecomposition).exists(p | p.type == RequirementType#Customer)
		message : "System requirements must originate from at least one Customer requirement at requirement \""
			+ self.`identifier` + "\"." 
	}
	
	constraint SystemReqHasTestCase {
		guard : self.type == RequirementType#System
		check : self.testCases.size() > 0
		message : "System requirements must have a test case at requirement \"" + self.`identifier` + "\"."
	}
}

context TestCase {
	constraint VerifiesNoCustomerReqs {
		check : not self.verifies.exists(r | r.type == RequirementType#Customer)
		message : "Test case should only verify System requirements at test case \"" + 
			self.`description` + "\"."
			
		fix {
				title : "Delete verifications of customer requirements at test case \"" + self.`description` + "\""
   			do {
    			self.verifies = self.verifies.select(r | r.type == RequirementType#System);
    		}
		}
	}
}